{"version":3,"file":"main.min.js","sources":["../../packages/stadline/js-extension-bundle/Resources/public/backbone/extensions/application.js","../../packages/stadline/js-extension-bundle/Resources/public/backbone/extensions/layoutview.js","../../packages/stadline/js-extension-bundle/Resources/public/backbone/extensions/relationalmodel.js","../../packages/stadline/js-extension-bundle/Resources/public/backbone/extensions/subcollection.js","../../assets/scripts/models/question.js","../../assets/scripts/collections/questions.js","../../assets/scripts/views/chat-room.js","../../assets/scripts/views/layout.js","../../assets/scripts/views/message-form.js","../../assets/scripts/main.js"],"names":["Extension","window","Application","Marionette","extend","initialize","App","this","Behaviors","behaviorsLookup","parameters","Backbone","Model","on","clear","setParameter","key","value","set","getParameter","get","LayoutView","preventHashChange","event","$target","$","currentTarget","_","string","startsWith","attr","preventDefault","openModal","modalView","options","self","modal","show","magnificPopup","open","defaults","items","src","$el","type","midClick","callbacks","layout","closeModal","close","destroy","modalViewClass","currentView","RelationalModel","prototype","apply","arguments","isUndefined","_initialAttributes","attributes","clone","addReference","collection","givenModel","additionalValues","callback","model","addedModels","add","merge","parse","isFunction","each","addedModel","call","addReferences","givenModels","models","map","Collection","toJSON","serialize","chain","reject","isObject","cid","id","save","val","contains","Deferred","resolve","push","relatedModels","attribute","concat","modelsToSync","filter","hasUrl","isSyncable","length","_save","every","isValid","deferredSave","done","pop","xhr","isVanilla","isEqual","isNew","baseUrl","result","SubCollection","constructor","parent","comparator","remove","reset","module","Message","Messages","Models","url","messages","Collections","fetch","ChatRoomMessage","ItemView","template","serializeData","message","modelEvents","change:text","tagName","ChatRoom","CompositeView","childView","childViewContainer","Layout","events","click a[href]","regions","chatRoom","messageForm","onRender","Views","MessageForm","submit form","onFormSubmit","values","serializeObject","Date","render","el","ajax","dataType","templates","document","body","append","ajaxSetup","timeout","headers","X-Requested-With","start"],"mappings":"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","sourcesContent":["Extension = window.Extension || {};\n\nExtension.Application = Marionette.Application.extend({\n    initialize: function() {\n        var App = this;\n\n        Marionette.Behaviors.behaviorsLookup = function() {\n            return App.Behaviors;\n        };\n\n        App.parameters = new Backbone.Model();\n\n        App.on(\"stop\", function() {\n            App.parameters.clear();\n        });\n    },\n\n    setParameter: function(key, value) {\n        this.parameters.set(key, value);\n    },\n\n    getParameter: function(key) {\n        return this.parameters.get(key);\n    }\n});","Extension = window.Extension || {};\n\nExtension.LayoutView = Marionette.LayoutView.extend({\n    /**\n     * Removed default action on hash links\n     * in order not to trigger router methods\n     */\n    preventHashChange: function(event) {\n        var $target = $(event.currentTarget);\n\n        if (_.string.startsWith($target.attr('href'), '#')) {\n            event.preventDefault();\n        }\n    },\n\n    /**\n     * Open a view in a modal\n     *\n     * Attach a view to modal region\n     * and trigger modal initialization\n     */\n    openModal: function(modalView, options) {\n        var self = this;\n\n        this.modal.show(modalView);\n\n        $.magnificPopup.open(_.defaults({}, options, {\n            items: {\n                src: this.modal.$el,\n                type: 'inline'\n            },\n            /*modal: true,*/\n            midClick: true,\n            callbacks: {\n                open: function() {\n                    self.modal.$el.on(\"click\", \".mfp-close, .mfp-inline-close\", function() {\n                        App.layout.closeModal();\n                    });\n\n                    self.modal.$el.on(\"click\", \"a[href]\", function(event) {\n                        self.preventHashChange(event);\n                    });\n                },\n                close: function() {\n                    modalView.destroy();\n                }\n            }\n        }));\n    },\n\n    /**\n     * Close current modal\n     *\n     * A modal view class can be passed to prevent closing the wrong modal\n     */\n    closeModal: function(modalViewClass) {\n        if (!modalViewClass || this.modal.currentView instanceof modalViewClass) {\n            $.magnificPopup.close();\n        }\n    }\n});","Extension = window.Extension || {};\n\n/**\n * Relational model extension\n */\nExtension.RelationalModel = Backbone.Model.extend({\n    set: function() {\n        Backbone.Model.prototype.set.apply(this, arguments);\n\n        if (_.isUndefined(this._initialAttributes)) {\n            this._initialAttributes = _(this.attributes).clone();\n        }\n\n        return this;\n    },\n\n    /**\n     * To be used in parse process\n     * > add model response to collection\n     * > and return related model\n     */\n    addReference: function(collection, givenModel, additionalValues, callback) {\n        var model = _(givenModel).extend(additionalValues);\n\n        var addedModels = collection.add([model], {merge: true, parse: true});\n\n        if (_.isFunction(callback)) {\n            var self = this;\n\n            _(addedModels).each(function(addedModel) {\n                callback.call(self, addedModel);\n            });\n        }\n\n        return addedModels[0];\n    },\n\n    /**\n     * To be used in parse process\n     * > add model responses to collection\n     * > and return an array of related models\n     */\n    addReferences: function(collection, givenModels, additionalValues, callback) {\n        var models = _(givenModels).map(function(model) {\n            return _(model).extend(additionalValues);\n        });\n\n        var addedModels = collection.add(models, {merge: true, parse: true});\n\n        if (_.isFunction(callback)) {\n            var self = this;\n\n            _(addedModels).each(function(addedModel) {\n                callback.call(self, addedModel);\n            });\n        }\n\n        return new Backbone.Collection(addedModels);\n    },\n\n    /**\n     * Serialize model\n     * > used in saving process\n     */\n    toJSON: function(options) {\n        // serialize helper, which flatten related models to ids\n        var serialize = function(value) {\n            if (value instanceof Backbone.Collection) {\n                return value.chain().map(serialize).reject(_.isUndefined).value();\n            } else if (_.isObject(value) && value.cid) {\n                return value.id;\n            } else {\n                return value;\n            }\n        };\n\n        var attributes = {};\n\n        _(this.attributes).each(function(value, key) {\n            attributes[key] = serialize(value);\n        });\n\n        return attributes;\n    },\n\n    /**\n     * Nested save process\n     * > save related models before current model\n     *\n     * @returns {Deferred}\n     */\n    save: function(key, val, options) {\n        var self = this;\n\n        options = options || {\n            models: []\n        };\n\n        // remember object tree to avoid infinite recursion\n        if (_(options['models']).contains(this)) {\n            return $.Deferred().resolve();\n        } else {\n            options['models'].push(this);\n        }\n\n        // get related models\n        var relatedModels = [];\n        _(this.attributes).each(function(attribute) {\n            if (attribute instanceof Backbone.Model) {\n                relatedModels.push(attribute);\n            } else if (attribute instanceof Backbone.Collection) {\n                relatedModels = relatedModels.concat(attribute.models);\n            }\n        });\n\n        // check models to sync\n        var modelsToSync = _(relatedModels).filter(function(model) {\n            return model.hasUrl() && model.isSyncable();\n        });\n\n        // if there is no model to sync, use regular save method\n        if (modelsToSync.length < 1) {\n            return this._save(key, val, options);\n        }\n\n        // reject save if a related model is invalid\n        if (!_(modelsToSync).every(function(model) {\n            return model.isValid();\n        })) {\n            return false;\n        }\n\n        // prepare deferred save\n        var deferredSave = $.Deferred();\n\n        // sync related models first\n        _(modelsToSync).each(function(model, i) {\n            model.save(null, null, options).done(function() {\n                modelsToSync.pop();\n\n                // if we have synced all related model, save parent\n                if (modelsToSync.length < 1) {\n                    self._save(key, val, options).done(function() {\n                        // then resolve the promise\n                        deferredSave.resolve();\n                    });\n                }\n            });\n        });\n\n        return deferredSave;\n    },\n\n    _save: function() {\n        var self = this;\n        var xhr = Backbone.Model.prototype.save.apply(this, arguments).done(function() {\n            self._initialAttributes = _(self.attributes).clone();\n        });\n        return xhr;\n    },\n    \n    /**\n     * Test if model has changed this initialization\n     * \n     * @returns {Boolean}\n     */\n    isVanilla: function() {\n        return _(this._initialAttributes).isEqual(this.attributes);\n    },\n\n    /**\n     * Test if model has data to be synced\n     *\n     * @returns {Boolean}\n     */\n    isSyncable: function() {\n        return this.isNew() || !this.isVanilla();\n    },\n\n    /**\n     * Test if model has a valid url\n     *\n     * @returns {Boolean}\n     */\n    hasUrl: function() {\n        var baseUrl =\n            _.result(this, 'urlRoot') ||\n            _.result(this.collection, 'url');\n\n        return !!baseUrl;\n    }\n});","Extension = window.Extension || {};\n\n/**\n * Sub-collection extension\n * A sub collection sync with a parent collection\n *\n * Eg:\n * - subcollection:    activeUsers\n * - parentcollection: allUsers\n *\n * Add and remove in subcollection are synced with the parent collection, but add and remove in parent collection\n * are not synced the subcollections because we don't know how they are related.\n *\n * Model changes are sync with all collections because model are object references.\n */\nExtension.SubCollection = Backbone.Collection.extend({\n    constructor: function(models, options) {\n        options || (options = {});\n\n        // parent option should be set on initialization\n        if (options.parent) {\n            this.parent = options.parent;\n            this.model = this.parent.model;\n            this.comparator = this.parent.comparator;\n\n            this.on(\"add\", function(model, collection, options) {\n                this.parent.add(model, options);\n            });\n            this.on(\"remove\", function(model, collection, options) {\n                this.parent.remove(model, options);\n            });\n            this.on(\"reset\", function(collection, options) {\n                this.parent.reset(options);\n            });\n            this.on(\"change\", function(model, changes) {\n                this.parent.get(model).set(model.toJSON());\n            });\n        }\n\n        Backbone.Collection.apply(this, arguments);\n    }\n});","App = window.App || new Extension.Application();\n\nApp.module('Models', function(module) {\n    module.Message = Extension.RelationalModel.extend({\n        // nothing yet\n    });\n});","App = window.App || new Extension.Application();\n\nApp.module('Collections', function(module) {\n    /**\n     * Global limit collection\n     */\n    module.Messages = Backbone.Collection.extend({\n        model: App.Models.Message,\n        url: function() {\n            return App.getParameter('api_base_url')+'/messages.json';\n        }\n    });\n\n    App.on(\"before:start\", function() {\n        App.messages = new App.Collections.Messages();\n    });\n\n    App.on(\"start\", function() {\n        App.messages.fetch();\n    });\n\n    App.on(\"stop\", function() {\n        App.messages.reset();\n    });\n});","App = window.App || new Extension.Application();\n\nApp.module('Views', function(module) {\n\n    module.ChatRoomMessage = Marionette.ItemView.extend({\n        template: \"#chat-room-message-template\",\n        serializeData: function() {\n            return {\n                message: this.model\n            };\n        },\n\n        modelEvents: {\n            'change:text': 'render'\n        },\n\n        tagName: 'li'\n    });\n\n    module.ChatRoom = Marionette.CompositeView.extend({\n        template: \"#chat-room-template\",\n        serializeData: function() {\n            return {\n                messages: this.collection\n            };\n        },\n\n        childView: module.ChatRoomMessage,\n        childViewContainer: 'ul'\n    });\n});","App = window.App || new Extension.Application();\n\nApp.module('Views', function(module) {\n    module.Layout = Extension.LayoutView.extend({\n        template: \"#layout-template\",\n\n        events: {\n            \"click a[href]\": \"preventHashChange\"\n        },\n\n        regions: {\n            chatRoom: \"#chat-room-region\",\n            messageForm: \"#message-form-region\"\n        },\n\n        onRender: function() {\n            this.chatRoom.show(new App.Views.ChatRoom({\n                collection: App.messages\n            }));\n\n            this.messageForm.show(new App.Views.MessageForm({\n                model: new App.Models.Message()\n            }));\n        }\n    });\n});","App = window.App || new Extension.Application();\n\nApp.module('Views', function(module) {\n    module.MessageForm = Marionette.ItemView.extend({\n        template: \"#message-form-template\",\n        serializeData: function() {\n            return {\n                message: this.model\n            };\n        },\n\n        events: {\n            \"submit form\": \"onFormSubmit\"\n        },\n\n        onFormSubmit: function(event) {\n            event.preventDefault();\n\n            var values = this.$('form').serializeObject();\n            var message = new App.Models.Message(values.message);\n\n            message.set('created_at', new Date());\n            App.messages.add(message);\n            message.save();\n\n            this.render();\n        }\n    });\n});","App = window.App || new Extension.Application();\n\n$(function() {\n    // after booting the application\n    App.on(\"before:start\", function() {\n        // initialize data\n        App.setParameter('api_base_url', 'http://api-marionette.local/api');\n    });\n\n    App.on(\"start\", function() {\n        // render main view\n        App.layout = new App.Views.Layout({\n            el: $(\".backbone-container:first\")\n        });\n\n        App.layout.render();\n    });\n\n    $.ajax({\n        url: 'dist/templates.html',\n        dataType: 'text'\n    }).done(function(templates) {\n        $(document.body).append(templates);\n\n        $.ajaxSetup({\n            timeout: 2000,\n            headers: {'X-Requested-With': 'XMLHttpRequest'}\n        });\n\n        // boot application\n        App.start();\n    });\n});"]}